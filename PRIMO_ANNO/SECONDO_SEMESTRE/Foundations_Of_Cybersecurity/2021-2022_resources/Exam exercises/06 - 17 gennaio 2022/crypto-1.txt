EXERCISE

Consider the following identification protocol that allows Alice to identify itself w.r.t. Bob  where c is a 128-bit random challenge, r is the corresponding response, and v is 24-bit random initialization vector:

M1 A -> B: Identification Request
M2 B -> A: c
M3 A -> B: v, r
M4 B -> A: YES|NO

Upon receiving message M2 carrying a challenge c from Bob, Alice generates an initialization vector v at random, computes the response r by encrypting c as follows: r = (SPRG(k||v) xor c),  where SPRG(k||v) is a 128-bit sequence generated by a secure pseudo-random generator SPRG. The generator is seeded by k||v, where k is a long-term cryptographic key a-priori secretely shared by Alice and Bob. Upon receiving the response r and the initialization vector v from Alice in message M3, Bob computes r' = SPRG(k||v) xor c, and and returns (r' == r) to Alice.

A. Does this protocol guarantee identification? Can a passive adversary impersonate Alice?

Let us suppose now that Bob sends Alice an initialization vector v together with the challenge c in message M2 which becomes  <c, v> (v in M3 is not necessary anymore).

B. Define a dictionary attack against this variant of the protocol and evaluate the size in bytes of the dictionary. 

SOLUTION
 
A. An adversary can eavesdrop the channel, and obtains v, r an c. So it is able to determine z = r âŠ• c, where z = SPRG(k||v). By using the pair (v, z) then the adversary is able to identify as Alice  w.r.t. to Bob whenever (s)he likes.

B As in point A, the  adversary can eavesdrop the channel, and obtains v, r an c. However, now, the choice of v is not under his/her control. So (s)he has to build a dictionary (v, z). Whenever Bob reuses v, the adversary is able to reuse z. The dictionary has a number of entries n that is equal to the number of initializations vectors, namely n = 2^(24). Each entry must accommodate the pseudo-random sequence of bits corresponding to v. So, its size s is 16 bytes. It follows that the dictionary size S is S = n x s = 2^(28) bytes = 256 Mbytes.
