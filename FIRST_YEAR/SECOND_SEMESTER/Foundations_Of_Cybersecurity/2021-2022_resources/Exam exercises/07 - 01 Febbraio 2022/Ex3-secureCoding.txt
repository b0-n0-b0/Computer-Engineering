EXERCISE
--------

Find and explain the vulnerabilities of the following function. Then, patch the vulnerabilities. There can be zero, one, or more vulnerabilities.
The function expects a user to open a file in the  /home/Alice/ path, from where it is executed.

void do_stuff(const char* file) {
if (strlen(file)>0 && file[0] == '/')
{ /* Absolute path! Handle error */ }
FILE *f = fopen(file, "r");
if (!f) { /* File doesn’t exists, handle error */ }
else {
/* read file*/
}
fclose(f);
}

SOLUTION
--------

This is a classic canonicalization problem. The “solution” is to invoke the “realpath” function, but the programmer must be aware that there still are TOC TOU race problems.
An accettable patch is:

void do_stuff(const char* file) {
char* canon_file = malloc(/*appropriate size*/);
canon_file=realpath(file,NULL);
if(!canon_file){/*handle error*/}
const char[] ok_dir=”/home/alice”;
if(strncmp(canon_file, ok_dir, strlen(ok_dir))!=0)
	{/*handle error, path unauthorized*/}
FILE *f = fopen(file, "r");
if (!f) { /* File doesn’t exists, handle error */ }
else {
/*read file*/
}
fclose(f);
free(canon_file);
}
