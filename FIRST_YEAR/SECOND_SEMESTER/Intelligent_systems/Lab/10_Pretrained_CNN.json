{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["rbG602GhQXIc","fmkQtlQRQbtI","___3y4QVQi5J","rCxjXPZ_QosX","9PPlDYCJIxQh","UUp0dZgbF4OO"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"xgeCtRGwIxO2"},"source":["# Using a pre-trained convnet\n","\n","- Chapter 8, Section 3 of [Deep Learning with Python, v2](https://www.manning.com/books/deep-learning-with-python?a_aid=keras&a_bid=76564dff).\n"]},{"cell_type":"code","metadata":{"id":"9X75dgpHIxOu"},"source":["from tensorflow import keras\n","import os"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Pvgk_tTccRN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668760449130,"user_tz":-60,"elapsed":23828,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"0e954b9a-aaab-4875-9f43-70dce4d12a88"},"source":["# mount drive \n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"gIVQmTZ4PcWE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668760450804,"user_tz":-60,"elapsed":1700,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"3620e4dd-a711-424c-ec80-db98815b2295"},"source":["_URL = 'https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip'\n","path_to_zip = keras.utils.get_file('cats_and_dogs.zip', origin=_URL, extract=True)\n","PATH = os.path.join(os.path.dirname(path_to_zip), 'cats_and_dogs_filtered')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip\n","68606236/68606236 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","metadata":{"id":"uYL7qJPgQVzS"},"source":["train_dir = os.path.join(PATH, 'train')\n","validation_dir = os.path.join(PATH, 'validation')\n","train_cats_dir = os.path.join(train_dir, 'cats')  # directory with our training cat pictures\n","train_dogs_dir = os.path.join(train_dir, 'dogs')  # directory with our training dog pictures\n","validation_cats_dir = os.path.join(validation_dir, 'cats')  # directory with our validation cat pictures\n","validation_dogs_dir = os.path.join(validation_dir, 'dogs')  # directory with our validation dog pictures"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1LKp_dv6R0el"},"source":["num_cats_tr = len(os.listdir(train_cats_dir))\n","num_dogs_tr = len(os.listdir(train_dogs_dir))\n","\n","num_cats_val = len(os.listdir(validation_cats_dir))\n","num_dogs_val = len(os.listdir(validation_dogs_dir))\n","\n","total_train = num_cats_tr + num_dogs_tr\n","total_val = num_cats_val + num_dogs_val"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XxFugwj5R329","executionInfo":{"status":"ok","timestamp":1668760450809,"user_tz":-60,"elapsed":17,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"bdd632f5-1d03-4d49-c1bb-9aac9208e79c"},"source":["print('total training cat images:', num_cats_tr)\n","print('total training dog images:', num_dogs_tr)\n","\n","print('total validation cat images:', num_cats_val)\n","print('total validation dog images:', num_dogs_val)\n","print(\"--\")\n","print(\"Total training images:\", total_train)\n","print(\"Total validation images:\", total_val)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total training cat images: 1000\n","total training dog images: 1000\n","total validation cat images: 500\n","total validation dog images: 500\n","--\n","Total training images: 2000\n","Total validation images: 1000\n"]}]},{"cell_type":"markdown","metadata":{"id":"FKjKyfQ4mxtv"},"source":["Generate the `Dataset` objects, as in the previous notebook."]},{"cell_type":"code","metadata":{"id":"8_L9kV1gTjfI"},"source":["BATCH_SIZE = 32\n","IMAGE_HEIGHT = 180\n","IMAGE_WIDTH = 180"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iscePHIFJd23","executionInfo":{"status":"ok","timestamp":1668760453581,"user_tz":-60,"elapsed":2784,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"829cfa58-9f33-4468-cb2e-45723a3bb9e9"},"source":["from tensorflow.keras.utils import image_dataset_from_directory\n","\n","train_dataset = image_dataset_from_directory(\n","    os.path.join(PATH, 'train'),\n","    image_size=(IMAGE_HEIGHT, IMAGE_WIDTH),\n","    batch_size=BATCH_SIZE)\n","\n","validation_dataset = image_dataset_from_directory(\n","    os.path.join(PATH, 'validation'),\n","    image_size=(IMAGE_HEIGHT, IMAGE_WIDTH),\n","    batch_size=BATCH_SIZE)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 2000 files belonging to 2 classes.\n","Found 1000 files belonging to 2 classes.\n"]}]},{"cell_type":"markdown","metadata":{"id":"rmqYKPI-KBDn"},"source":["\n","\n","A common and highly effective approach to deep learning on small image datasets is to **leverage a pre-trained network**. A pre-trained network \n","is simply a saved network previously trained on a large dataset, typically on a large-scale image classification task. If this original \n","dataset is large enough and general enough, then the spatial hierarchy of features learned by the pre-trained network can effectively act as a \n","generic model of our visual world, and hence its features can prove useful for many different computer vision problems, even though these \n","new problems might involve completely different classes from those of the original task. \n","\n","Such portability of learned features across different problems is a key advantage of deep learning \n","compared to many older shallow learning approaches, and it makes deep learning very effective for small-data problems.\n","\n","In our case, we will consider a large convnet trained on the **ImageNet dataset** (1.4 million labeled images and 1000 different classes). \n","ImageNet contains many animal classes, including different species of cats and dogs, and we can thus expect to perform very well on our cat \n","vs. dog classification problem.\n","\n","We will use the VGG16 architecture, developed by [Karen Simonyan and Andrew Zisserman in 2014](https://arxiv.org/abs/1409.1556), a simple and widely used convnet architecture \n","for ImageNet. Although it is a bit of an older model, far from the current state of the art and somewhat heavier than many other recent \n","models, we chose it because its architecture is similar to what you are already familiar with, and easy to understand without introducing \n","any new concepts. This may be your first encounter with one of these cutesie model names -- VGG, ResNet, Inception, Inception-ResNet, \n","Xception... you will get used to them, as they will come up frequently if you keep doing deep learning for computer vision.\n","\n","There are two ways to leverage a pre-trained network: \n","- **feature extraction**\n","- **fine-tuning**\n","\n","We will cover both of them. Let's start with feature extraction."]},{"cell_type":"markdown","metadata":{"id":"UjCC8qCLIxO3"},"source":["## Feature extraction\n","\n","Feature extraction consists of using the representations learned by a previous network to extract interesting features from new samples. \n","These features are then run through a new classifier, which is trained from scratch.\n","\n","As we saw previously, convnets used for image classification comprise two parts: \n","- The first part is called the \"convolutional base\" of the model, as a series of pooling and convolution layers, \n","- The second part is typically a densely-connected classifier. \n","\n","This is how VGG network looks like:\n","\n","![vgg](https://www.researchgate.net/profile/Max_Ferguson/publication/322512435/figure/fig3/AS:697390994567179@1543282378794/Fig-A1-The-standard-VGG-16-network-architecture-as-proposed-in-32-Note-that-only.png)\n","\n","\n","In the case of convnets, \"**feature extraction**\" will simply consist of \n","1. taking the convolutional base of a previously-trained network, \n","2. running the new data through it, \n","3. and training a new classifier on top of the output.\n","\n","![swapping FC classifiers](https://s3.amazonaws.com/book.keras.io/img/ch5/swapping_fc_classifier.png)\n","\n","Why only reuse the convolutional base? Could we reuse the densely-connected classifier as well? In general, it should be avoided. The \n","reason is simply that the **representations learned by the convolutional base are likely to be more generic and therefore more reusable**: the \n","feature maps of a convnet are presence maps of generic concepts over a picture, which is likely to be useful regardless of the computer \n","vision problem at hand.\n","\n","On the other hand, the **representations learned by the classifier will necessarily be very specific to the set of classes that the model was trained on** -- they will only contain information about the presence probability of this or that class in the \n","entire picture. Additionally, representations found in densely-connected layers no longer contain any information about _where_ objects are \n","located in the input image: these layers get rid of the notion of space, whereas the object location is still described by convolutional \n","feature maps. For problems where object location matters, densely-connected features would be largely useless.\n","\n","Note that the level of generality (and therefore reusability) of the representations extracted by specific convolution layers depends on \n","the depth of the layer in the model. Layers that come earlier in the model extract local, highly generic feature maps (such as visual \n","edges, colors, and textures), while layers higher-up extract more abstract concepts (such as \"cat ear\" or \"dog eye\"). So if your new \n","dataset differs a lot from the dataset that the original model was trained on, you may choose to use only the first few layers of the \n","model to do feature extraction, rather than using the entire convolutional base.\n","\n","In our case, since the ImageNet class set did contain multiple dog and cat classes, it is likely that it would be beneficial to reuse the \n","information contained in the densely-connected layers of the original model. However, we will chose not to, in order to cover the more \n","general case where the class set of the new problem does not overlap with the class set of the original model."]},{"cell_type":"markdown","metadata":{"id":"qmKsgKRFIxO4"},"source":["Let's put this in practice by using the convolutional base of the VGG16 network, trained on ImageNet, to extract interesting features from \n","our cat and dog images, and then training a cat vs. dog classifier on top of these features.\n","\n","The VGG16 model, among others, comes pre-packaged with tf.keras. You can import it from the `tf.keras.applications` module. Here's the list of \n","image classification models (all pre-trained on the ImageNet dataset) that are available as part of `tf.keras.applications`:\n","\n","* Xception\n","* VGG16\n","* VGG19\n","* ResNet50\n","* InceptionV3\n","* InceptionResNetV2\n","* MobileNet\n","* DenseNet\n","* NASNet\n","* MobileNetV2\n","\n","Let's instantiate the VGG16 model:"]},{"cell_type":"code","metadata":{"id":"38S8c8e7IxO5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668760454397,"user_tz":-60,"elapsed":828,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"b7b6ac63-c348-42e8-b382-fe53f3affeb5"},"source":["from tensorflow.keras.applications import VGG16\n","\n","conv_base = keras.applications.vgg16.VGG16(\n","    weights=\"imagenet\",\n","    include_top=False,\n","    input_shape=(180, 180, 3))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","58889256/58889256 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"d4qs4fb4IxO-"},"source":["We passed three arguments to the constructor:\n","\n","* `weights`, to specify which weight checkpoint to initialize the model from\n","* `include_top`, which refers to including or not the densely-connected classifier on top of the network. By default, this \n","densely-connected classifier would correspond to the 1000 classes from ImageNet. Since we intend to use our own densely-connected \n","classifier (with only two classes, cat and dog), we don't need to include it.\n","* `input_shape`, the shape of the image tensors that we will feed to the network.\n","\n","Here's the detail of the architecture of the VGG16 convolutional base: it's very similar to the simple convnets that you are already \n","familiar with."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SIYj2NodIxO_","executionInfo":{"status":"ok","timestamp":1668760454399,"user_tz":-60,"elapsed":41,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"a30711fa-86e5-4766-9b8d-42200756efca"},"source":["conv_base.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"vgg16\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 180, 180, 3)]     0         \n","                                                                 \n"," block1_conv1 (Conv2D)       (None, 180, 180, 64)      1792      \n","                                                                 \n"," block1_conv2 (Conv2D)       (None, 180, 180, 64)      36928     \n","                                                                 \n"," block1_pool (MaxPooling2D)  (None, 90, 90, 64)        0         \n","                                                                 \n"," block2_conv1 (Conv2D)       (None, 90, 90, 128)       73856     \n","                                                                 \n"," block2_conv2 (Conv2D)       (None, 90, 90, 128)       147584    \n","                                                                 \n"," block2_pool (MaxPooling2D)  (None, 45, 45, 128)       0         \n","                                                                 \n"," block3_conv1 (Conv2D)       (None, 45, 45, 256)       295168    \n","                                                                 \n"," block3_conv2 (Conv2D)       (None, 45, 45, 256)       590080    \n","                                                                 \n"," block3_conv3 (Conv2D)       (None, 45, 45, 256)       590080    \n","                                                                 \n"," block3_pool (MaxPooling2D)  (None, 22, 22, 256)       0         \n","                                                                 \n"," block4_conv1 (Conv2D)       (None, 22, 22, 512)       1180160   \n","                                                                 \n"," block4_conv2 (Conv2D)       (None, 22, 22, 512)       2359808   \n","                                                                 \n"," block4_conv3 (Conv2D)       (None, 22, 22, 512)       2359808   \n","                                                                 \n"," block4_pool (MaxPooling2D)  (None, 11, 11, 512)       0         \n","                                                                 \n"," block5_conv1 (Conv2D)       (None, 11, 11, 512)       2359808   \n","                                                                 \n"," block5_conv2 (Conv2D)       (None, 11, 11, 512)       2359808   \n","                                                                 \n"," block5_conv3 (Conv2D)       (None, 11, 11, 512)       2359808   \n","                                                                 \n"," block5_pool (MaxPooling2D)  (None, 5, 5, 512)         0         \n","                                                                 \n","=================================================================\n","Total params: 14,714,688\n","Trainable params: 14,714,688\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"6xOFaEu6IxPD"},"source":["The final feature map has shape `(5, 5, 512)`. That's the feature on top of which we will stick a densely-connected classifier.\n","\n","At this point, there are two ways we could proceed: \n","```python\n","resize_and_rescale = tf.keras.Sequential([\n","  layers.Resizing(IMG_SIZE, IMG_SIZE),\n","  layers.Rescaling(1./255)\n","])\n","\n","data_augmentation = keras.Sequential([\n","    layers.RandomFlip(\"horizontal\"),\n","    layers.RandomRotation(0.1),\n","    layers.RandomZoom(0.2),\n","])\n","```\n","\n","**Option 1: Apply the preprocessing layers to your dataset**\n","```python\n","aug_ds = train_ds.map(\n","  lambda x, y: (resize_and_rescale(x, training=True), y))\n","```\n","With this approach, you use Dataset.map to create a dataset that yields batches of augmented images. In this case:\n","\n","- Data augmentation will happen asynchronously on the CPU, and is non-blocking. You can overlap the training of your model on the GPU with data preprocessing, using Dataset.prefetch, shown below.\n","- In this case the preprocessing layers will not be exported with the model when you call Model.save. You will need to attach them to your model before saving it or reimplement them server-side. After training, you can attach the preprocessing layers before export."]},{"cell_type":"markdown","source":["Configure the training, validation, and test datasets with the Keras preprocessing layers you created earlier. You will also configure the datasets for performance, using parallel reads and buffered prefetching to yield batches from disk without I/O become blocking.\n","\n","**Note**: *Data augmentation should only be applied to the training set.*"],"metadata":{"id":"QgzwbpNJM2eB"}},{"cell_type":"code","source":["def prepare(ds, shuffle=False, augment=False):\n","  # Resize and rescale all datasets.\n","  ds = ds.map(lambda x, y: (resize_and_rescale(x), y), \n","              num_parallel_calls=AUTOTUNE)\n","\n","  if shuffle:\n","    ds = ds.shuffle(1000)\n","\n","  # Batch all datasets.\n","  ds = ds.batch(batch_size)\n","\n","  # Use data augmentation only on the training set.\n","  if augment:\n","    ds = ds.map(lambda x, y: (data_augmentation(x, training=True), y), \n","                num_parallel_calls=AUTOTUNE)\n","\n","  # Use buffered prefetching on all datasets.\n","  return ds.prefetch(buffer_size=AUTOTUNE)"],"metadata":{"id":"a7VI_pyMM6IV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_ds = prepare(train_dataset, shuffle=True, augment=True)\n","val_ds = prepare(validation_dataset)\n","test_ds = prepare(test_dataset)"],"metadata":{"id":"NnvkSp1PM7EL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Option 2: Make the preprocessing layers part of your model**\n","\n","```python\n","model = tf.keras.Sequential([\n","  # Add the preprocessing layers you created earlier.\n","  resize_and_rescale,\n","  data_augmentation,\n","  layers.Conv2D(16, 3, padding='same', activation='relu'),\n","  layers.MaxPooling2D(),\n","  # Rest of your model.\n","])\n","```\n","There are two important points to be aware of in this case:\n","\n","- Data augmentation will run on-device, synchronously with the rest of your layers, and benefit from GPU acceleration.\n","\n","- When you export your model using model.save, the preprocessing layers will be saved along with the rest of your model. If you later deploy this model, it will automatically standardize images (according to the configuration of your layers). This can save you from the effort of having to reimplement that logic server-side."],"metadata":{"id":"4rhTnBL9NCrR"}},{"cell_type":"markdown","metadata":{"id":"FG7f7mYOIxPa"},"source":["In this notebook we will cover this latter approach for doing feature extraction extending the `conv_base` model and running it end-to-end on the inputs. Note that this technique is in fact so expensive that you should only attempt it if you have access to a GPU: it is generally intractable on CPU. If you cannot run your code on GPU, then the previous technique is the way to go."]},{"cell_type":"markdown","metadata":{"id":"KH69dTyLIxPm"},"source":["## Layers freezing\n","Before we compile and train our model, a very important thing to do is to freeze the convolutional base. \"Freezing\" a layer or set of \n","layers means preventing their weights from getting updated during training. If we don't do this, then the representations that were \n","previously learned by the convolutional base would get modified during training. Since the classifier on top (i.e., the `Dense` layers we will add) is randomly initialized, \n","very large weight updates would be propagated through the network, effectively destroying the representations previously learned.\n","\n","In Keras, freezing a network is done by setting its `trainable` attribute to `False`:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"67LTeT8GIxPo","executionInfo":{"status":"ok","timestamp":1668760454400,"user_tz":-60,"elapsed":20,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"7d30e78b-0b41-4256-a033-042a0ceb5148"},"source":["import numpy as np\n","\n","print('This is the number of trainable weights '\n","      'before freezing the conv base:', sum(np.prod(x.shape) for x in conv_base.trainable_weights))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the number of trainable weights before freezing the conv base: 14714688\n"]}]},{"cell_type":"code","metadata":{"id":"rkDgYYW0IxPt"},"source":["conv_base.trainable = False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s_hDOYQSIxPw","executionInfo":{"status":"ok","timestamp":1668760454402,"user_tz":-60,"elapsed":13,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"e6902072-46c6-4c1f-d3d9-d2a21fe6094d"},"source":["print('This is the number of trainable weights '\n","      'after freezing the conv base:', sum(np.prod(x.shape) for x in conv_base.trainable_weights))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the number of trainable weights after freezing the conv base: 0\n"]}]},{"cell_type":"markdown","metadata":{"id":"BkIc3loJk0sq"},"source":["Now we can create a new model that chains together\n","1. A data augmentation stage\n","2. Our frozen convolutional base\n","3. A dense classifier"]},{"cell_type":"code","metadata":{"id":"BsGMr9remK1X"},"source":["from tensorflow.keras import layers\n","\n","data_augmentation = keras.Sequential([\n","    layers.RandomFlip(\"horizontal\"),\n","    layers.RandomRotation(0.1),\n","    layers.RandomZoom(0.2),\n","])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LS58cXFwIxPb"},"source":["inputs = keras.Input(shape=(180, 180, 3))\n","x = data_augmentation(inputs)\n","x = keras.applications.vgg16.preprocess_input(x)\n","x = conv_base(x)\n","x = layers.Flatten()(x)\n","x = layers.Dense(256)(x)\n","x = layers.Dropout(0.5)(x)\n","outputs = layers.Dense(1, activation=\"sigmoid\")(x)\n","model = keras.Model(inputs, outputs)\n","model.compile(loss=\"binary_crossentropy\",\n","              optimizer=\"rmsprop\",\n","              metrics=[\"accuracy\"])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gXlgaIOMIxPf"},"source":["This is what our model looks like now:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lt8iotcyIxPg","executionInfo":{"status":"ok","timestamp":1668760455317,"user_tz":-60,"elapsed":489,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"b339a04f-4ed2-4c17-9f7b-bb1a1b401508"},"source":["model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_2 (InputLayer)        [(None, 180, 180, 3)]     0         \n","                                                                 \n"," sequential (Sequential)     (None, 180, 180, 3)       0         \n","                                                                 \n"," tf.__operators__.getitem (S  (None, 180, 180, 3)      0         \n"," licingOpLambda)                                                 \n","                                                                 \n"," tf.nn.bias_add (TFOpLambda)  (None, 180, 180, 3)      0         \n","                                                                 \n"," vgg16 (Functional)          (None, 5, 5, 512)         14714688  \n","                                                                 \n"," flatten (Flatten)           (None, 12800)             0         \n","                                                                 \n"," dense (Dense)               (None, 256)               3277056   \n","                                                                 \n"," dropout (Dropout)           (None, 256)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 257       \n","                                                                 \n","=================================================================\n","Total params: 17,992,001\n","Trainable params: 3,277,313\n","Non-trainable params: 14,714,688\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"HryYHOK3kvDn"},"source":["As you can see, the convolutional base of VGG16 has 14,714,688 parameters, which is very large. The classifier we are adding on top has 3 \n","million parameters."]},{"cell_type":"markdown","metadata":{"id":"yc5IJeUZIxP1"},"source":["With this setup, only the weights from the two `Dense` layers that we added will be trained. That's a total of four weight tensors: two per \n","layer (the main weight matrix and the bias vector). Note that in order for these changes to take effect, we must first compile the model. \n","If you ever modify weight trainability after compilation, you should then re-compile the model, or these changes would be ignored."]},{"cell_type":"markdown","metadata":{"id":"GctwfRHWnOsy"},"source":["As a last step, we define the `ModelCheckpoint` callback.\n","\n","A callback is an object (a class instance implementing specific methods) that is passed to the model in the call to `fit()` and that is called by the model at various points during training. It has access to all the available data about the state of the model and its performance, and it can take action: interrupt training, save a model, load a different weight set, or otherwise alter the state of the model.\n","\n","The `keras.callbacks` module include a number of built-in callbacks, including:\n","- `keras.callbacks.ModelCheckpoint`\n","- `keras.callbacks.EarlyStopping`\n","- `keras.callbacks.LearningRateScheduler`\n","- `keras.callbacks.ReduceLROnPlateau`\n","- `keras.callbacks.CSVLogger`"]},{"cell_type":"markdown","metadata":{"id":"p2UhMsjBnCcc"},"source":["`ModelCheckpoint`, which is usually adopted in combination with `EarlyStopping`, lets you continually save the model during training (and, optionally, save only the current best model so far: the version of the model that achieved the best performance at the end of an epoch)."]},{"cell_type":"code","metadata":{"id":"xPxcXpYsok9Y"},"source":["dir_name = \"/content/drive/My Drive/[AIDE] 2022-2023 - Data\"\n","if not os.path.exists(dir_name):\n","  os.makedirs(dir_name)\n","save_path = os.path.join(dir_name, 'cats_and_dogs_small_pretrained.h5')\n","\n","callbacks_list = [\n","    keras.callbacks.ModelCheckpoint(\n","    filepath=save_path,\n","    monitor=\"val_loss\",\n","    verbose=1,\n","    save_best_only=True)\n","]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dC-WG2e0zWpv","executionInfo":{"status":"ok","timestamp":1668760455319,"user_tz":-60,"elapsed":14,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"7e3f1c8d-22f3-46f4-88b5-4fbc2f81e79c"},"source":["save_path"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"iG_FwRrvm75i"},"source":["Now we can start training our model:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XqImTeg4IxP2","executionInfo":{"status":"ok","timestamp":1668761268718,"user_tz":-60,"elapsed":813410,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"b445715b-1feb-45bd-c778-4b73db154ab6"},"source":["history = model.fit(\n","    train_dataset,\n","    epochs=50, # 50 epochs take approximately 15 minutes\n","    validation_data=validation_dataset,\n","    callbacks = callbacks_list\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","63/63 [==============================] - ETA: 0s - loss: 17.7761 - accuracy: 0.9020\n","Epoch 1: val_loss improved from inf to 7.91604, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 26s 245ms/step - loss: 17.7761 - accuracy: 0.9020 - val_loss: 7.9160 - val_accuracy: 0.9530\n","Epoch 2/50\n","63/63 [==============================] - ETA: 0s - loss: 8.2770 - accuracy: 0.9300\n","Epoch 2: val_loss improved from 7.91604 to 6.56976, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 14s 214ms/step - loss: 8.2770 - accuracy: 0.9300 - val_loss: 6.5698 - val_accuracy: 0.9690\n","Epoch 3/50\n","63/63 [==============================] - ETA: 0s - loss: 5.5225 - accuracy: 0.9565\n","Epoch 3: val_loss improved from 6.56976 to 3.44077, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 13s 211ms/step - loss: 5.5225 - accuracy: 0.9565 - val_loss: 3.4408 - val_accuracy: 0.9750\n","Epoch 4/50\n","63/63 [==============================] - ETA: 0s - loss: 6.5800 - accuracy: 0.9520\n","Epoch 4: val_loss improved from 3.44077 to 2.88620, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 14s 216ms/step - loss: 6.5800 - accuracy: 0.9520 - val_loss: 2.8862 - val_accuracy: 0.9820\n","Epoch 5/50\n","63/63 [==============================] - ETA: 0s - loss: 4.1532 - accuracy: 0.9635\n","Epoch 5: val_loss did not improve from 2.88620\n","63/63 [==============================] - 14s 219ms/step - loss: 4.1532 - accuracy: 0.9635 - val_loss: 4.1209 - val_accuracy: 0.9680\n","Epoch 6/50\n","63/63 [==============================] - ETA: 0s - loss: 3.6381 - accuracy: 0.9685\n","Epoch 6: val_loss did not improve from 2.88620\n","63/63 [==============================] - 13s 203ms/step - loss: 3.6381 - accuracy: 0.9685 - val_loss: 3.0606 - val_accuracy: 0.9780\n","Epoch 7/50\n","63/63 [==============================] - ETA: 0s - loss: 4.1158 - accuracy: 0.9675\n","Epoch 7: val_loss did not improve from 2.88620\n","63/63 [==============================] - 14s 207ms/step - loss: 4.1158 - accuracy: 0.9675 - val_loss: 3.2005 - val_accuracy: 0.9690\n","Epoch 8/50\n","63/63 [==============================] - ETA: 0s - loss: 2.9614 - accuracy: 0.9720\n","Epoch 8: val_loss did not improve from 2.88620\n","63/63 [==============================] - 13s 201ms/step - loss: 2.9614 - accuracy: 0.9720 - val_loss: 4.7437 - val_accuracy: 0.9730\n","Epoch 9/50\n","63/63 [==============================] - ETA: 0s - loss: 2.7609 - accuracy: 0.9705\n","Epoch 9: val_loss did not improve from 2.88620\n","63/63 [==============================] - 13s 206ms/step - loss: 2.7609 - accuracy: 0.9705 - val_loss: 3.7600 - val_accuracy: 0.9730\n","Epoch 10/50\n","63/63 [==============================] - ETA: 0s - loss: 1.2612 - accuracy: 0.9795\n","Epoch 10: val_loss did not improve from 2.88620\n","63/63 [==============================] - 13s 201ms/step - loss: 1.2612 - accuracy: 0.9795 - val_loss: 3.6827 - val_accuracy: 0.9670\n","Epoch 11/50\n","63/63 [==============================] - ETA: 0s - loss: 2.1876 - accuracy: 0.9765\n","Epoch 11: val_loss did not improve from 2.88620\n","63/63 [==============================] - 13s 202ms/step - loss: 2.1876 - accuracy: 0.9765 - val_loss: 3.7711 - val_accuracy: 0.9750\n","Epoch 12/50\n","63/63 [==============================] - ETA: 0s - loss: 2.1757 - accuracy: 0.9800\n","Epoch 12: val_loss did not improve from 2.88620\n","63/63 [==============================] - 14s 212ms/step - loss: 2.1757 - accuracy: 0.9800 - val_loss: 3.7900 - val_accuracy: 0.9760\n","Epoch 13/50\n","63/63 [==============================] - ETA: 0s - loss: 1.8064 - accuracy: 0.9775\n","Epoch 13: val_loss did not improve from 2.88620\n","63/63 [==============================] - 13s 202ms/step - loss: 1.8064 - accuracy: 0.9775 - val_loss: 4.3115 - val_accuracy: 0.9680\n","Epoch 14/50\n","63/63 [==============================] - ETA: 0s - loss: 1.8943 - accuracy: 0.9785\n","Epoch 14: val_loss did not improve from 2.88620\n","63/63 [==============================] - 13s 203ms/step - loss: 1.8943 - accuracy: 0.9785 - val_loss: 3.3890 - val_accuracy: 0.9750\n","Epoch 15/50\n","63/63 [==============================] - ETA: 0s - loss: 1.9232 - accuracy: 0.9770\n","Epoch 15: val_loss did not improve from 2.88620\n","63/63 [==============================] - 14s 211ms/step - loss: 1.9232 - accuracy: 0.9770 - val_loss: 3.0191 - val_accuracy: 0.9730\n","Epoch 16/50\n","63/63 [==============================] - ETA: 0s - loss: 1.0965 - accuracy: 0.9820\n","Epoch 16: val_loss did not improve from 2.88620\n","63/63 [==============================] - 13s 210ms/step - loss: 1.0965 - accuracy: 0.9820 - val_loss: 3.2960 - val_accuracy: 0.9740\n","Epoch 17/50\n","63/63 [==============================] - ETA: 0s - loss: 1.7154 - accuracy: 0.9765\n","Epoch 17: val_loss improved from 2.88620 to 2.55514, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 14s 222ms/step - loss: 1.7154 - accuracy: 0.9765 - val_loss: 2.5551 - val_accuracy: 0.9770\n","Epoch 18/50\n","63/63 [==============================] - ETA: 0s - loss: 1.4832 - accuracy: 0.9785\n","Epoch 18: val_loss improved from 2.55514 to 2.39926, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 16s 244ms/step - loss: 1.4832 - accuracy: 0.9785 - val_loss: 2.3993 - val_accuracy: 0.9780\n","Epoch 19/50\n","63/63 [==============================] - ETA: 0s - loss: 1.5293 - accuracy: 0.9805\n","Epoch 19: val_loss improved from 2.39926 to 2.15181, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 14s 222ms/step - loss: 1.5293 - accuracy: 0.9805 - val_loss: 2.1518 - val_accuracy: 0.9820\n","Epoch 20/50\n","63/63 [==============================] - ETA: 0s - loss: 1.0399 - accuracy: 0.9835\n","Epoch 20: val_loss did not improve from 2.15181\n","63/63 [==============================] - 14s 222ms/step - loss: 1.0399 - accuracy: 0.9835 - val_loss: 2.4086 - val_accuracy: 0.9770\n","Epoch 21/50\n","63/63 [==============================] - ETA: 0s - loss: 1.1293 - accuracy: 0.9865\n","Epoch 21: val_loss did not improve from 2.15181\n","63/63 [==============================] - 13s 207ms/step - loss: 1.1293 - accuracy: 0.9865 - val_loss: 2.9357 - val_accuracy: 0.9780\n","Epoch 22/50\n","63/63 [==============================] - ETA: 0s - loss: 0.7998 - accuracy: 0.9850\n","Epoch 22: val_loss did not improve from 2.15181\n","63/63 [==============================] - 14s 218ms/step - loss: 0.7998 - accuracy: 0.9850 - val_loss: 2.7280 - val_accuracy: 0.9760\n","Epoch 23/50\n","63/63 [==============================] - ETA: 0s - loss: 0.9293 - accuracy: 0.9830\n","Epoch 23: val_loss did not improve from 2.15181\n","63/63 [==============================] - 13s 208ms/step - loss: 0.9293 - accuracy: 0.9830 - val_loss: 2.5704 - val_accuracy: 0.9750\n","Epoch 24/50\n","63/63 [==============================] - ETA: 0s - loss: 1.2676 - accuracy: 0.9835\n","Epoch 24: val_loss did not improve from 2.15181\n","63/63 [==============================] - 13s 207ms/step - loss: 1.2676 - accuracy: 0.9835 - val_loss: 3.8467 - val_accuracy: 0.9730\n","Epoch 25/50\n","63/63 [==============================] - ETA: 0s - loss: 0.9744 - accuracy: 0.9850\n","Epoch 25: val_loss did not improve from 2.15181\n","63/63 [==============================] - 14s 218ms/step - loss: 0.9744 - accuracy: 0.9850 - val_loss: 2.9091 - val_accuracy: 0.9720\n","Epoch 26/50\n","63/63 [==============================] - ETA: 0s - loss: 0.8963 - accuracy: 0.9835\n","Epoch 26: val_loss did not improve from 2.15181\n","63/63 [==============================] - 13s 204ms/step - loss: 0.8963 - accuracy: 0.9835 - val_loss: 2.2719 - val_accuracy: 0.9750\n","Epoch 27/50\n","63/63 [==============================] - ETA: 0s - loss: 0.9381 - accuracy: 0.9860\n","Epoch 27: val_loss did not improve from 2.15181\n","63/63 [==============================] - 13s 205ms/step - loss: 0.9381 - accuracy: 0.9860 - val_loss: 2.3955 - val_accuracy: 0.9760\n","Epoch 28/50\n","63/63 [==============================] - ETA: 0s - loss: 0.6657 - accuracy: 0.9890\n","Epoch 28: val_loss did not improve from 2.15181\n","63/63 [==============================] - 14s 221ms/step - loss: 0.6657 - accuracy: 0.9890 - val_loss: 2.3221 - val_accuracy: 0.9770\n","Epoch 29/50\n","63/63 [==============================] - ETA: 0s - loss: 0.7202 - accuracy: 0.9850\n","Epoch 29: val_loss did not improve from 2.15181\n","63/63 [==============================] - 14s 213ms/step - loss: 0.7202 - accuracy: 0.9850 - val_loss: 2.2023 - val_accuracy: 0.9770\n","Epoch 30/50\n","63/63 [==============================] - ETA: 0s - loss: 0.7836 - accuracy: 0.9870\n","Epoch 30: val_loss did not improve from 2.15181\n","63/63 [==============================] - 14s 213ms/step - loss: 0.7836 - accuracy: 0.9870 - val_loss: 2.4120 - val_accuracy: 0.9770\n","Epoch 31/50\n","63/63 [==============================] - ETA: 0s - loss: 0.7666 - accuracy: 0.9875\n","Epoch 31: val_loss did not improve from 2.15181\n","63/63 [==============================] - 13s 207ms/step - loss: 0.7666 - accuracy: 0.9875 - val_loss: 3.0628 - val_accuracy: 0.9770\n","Epoch 32/50\n","63/63 [==============================] - ETA: 0s - loss: 0.8488 - accuracy: 0.9875\n","Epoch 32: val_loss did not improve from 2.15181\n","63/63 [==============================] - 14s 217ms/step - loss: 0.8488 - accuracy: 0.9875 - val_loss: 2.3216 - val_accuracy: 0.9760\n","Epoch 33/50\n","63/63 [==============================] - ETA: 0s - loss: 0.7049 - accuracy: 0.9870\n","Epoch 33: val_loss did not improve from 2.15181\n","63/63 [==============================] - 14s 216ms/step - loss: 0.7049 - accuracy: 0.9870 - val_loss: 2.6116 - val_accuracy: 0.9730\n","Epoch 34/50\n","63/63 [==============================] - ETA: 0s - loss: 0.8691 - accuracy: 0.9850\n","Epoch 34: val_loss improved from 2.15181 to 2.04377, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 14s 225ms/step - loss: 0.8691 - accuracy: 0.9850 - val_loss: 2.0438 - val_accuracy: 0.9750\n","Epoch 35/50\n","63/63 [==============================] - ETA: 0s - loss: 0.7046 - accuracy: 0.9870\n","Epoch 35: val_loss did not improve from 2.04377\n","63/63 [==============================] - 15s 228ms/step - loss: 0.7046 - accuracy: 0.9870 - val_loss: 2.2432 - val_accuracy: 0.9790\n","Epoch 36/50\n","63/63 [==============================] - ETA: 0s - loss: 0.7610 - accuracy: 0.9900\n","Epoch 36: val_loss did not improve from 2.04377\n","63/63 [==============================] - 13s 210ms/step - loss: 0.7610 - accuracy: 0.9900 - val_loss: 2.6474 - val_accuracy: 0.9740\n","Epoch 37/50\n","63/63 [==============================] - ETA: 0s - loss: 0.4714 - accuracy: 0.9885\n","Epoch 37: val_loss did not improve from 2.04377\n","63/63 [==============================] - 13s 206ms/step - loss: 0.4714 - accuracy: 0.9885 - val_loss: 2.1927 - val_accuracy: 0.9750\n","Epoch 38/50\n","63/63 [==============================] - ETA: 0s - loss: 0.7743 - accuracy: 0.9840\n","Epoch 38: val_loss did not improve from 2.04377\n","63/63 [==============================] - 13s 209ms/step - loss: 0.7743 - accuracy: 0.9840 - val_loss: 2.0989 - val_accuracy: 0.9760\n","Epoch 39/50\n","63/63 [==============================] - ETA: 0s - loss: 0.4655 - accuracy: 0.9875\n","Epoch 39: val_loss improved from 2.04377 to 1.96767, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 14s 222ms/step - loss: 0.4655 - accuracy: 0.9875 - val_loss: 1.9677 - val_accuracy: 0.9740\n","Epoch 40/50\n","63/63 [==============================] - ETA: 0s - loss: 0.4536 - accuracy: 0.9900\n","Epoch 40: val_loss improved from 1.96767 to 1.79598, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 14s 223ms/step - loss: 0.4536 - accuracy: 0.9900 - val_loss: 1.7960 - val_accuracy: 0.9750\n","Epoch 41/50\n","63/63 [==============================] - ETA: 0s - loss: 0.4354 - accuracy: 0.9900\n","Epoch 41: val_loss did not improve from 1.79598\n","63/63 [==============================] - 13s 208ms/step - loss: 0.4354 - accuracy: 0.9900 - val_loss: 2.0888 - val_accuracy: 0.9790\n","Epoch 42/50\n","63/63 [==============================] - ETA: 0s - loss: 0.1173 - accuracy: 0.9950\n","Epoch 42: val_loss did not improve from 1.79598\n","63/63 [==============================] - 13s 210ms/step - loss: 0.1173 - accuracy: 0.9950 - val_loss: 3.2898 - val_accuracy: 0.9710\n","Epoch 43/50\n","63/63 [==============================] - ETA: 0s - loss: 0.7555 - accuracy: 0.9870\n","Epoch 43: val_loss did not improve from 1.79598\n","63/63 [==============================] - 14s 209ms/step - loss: 0.7555 - accuracy: 0.9870 - val_loss: 2.0657 - val_accuracy: 0.9750\n","Epoch 44/50\n","63/63 [==============================] - ETA: 0s - loss: 0.6272 - accuracy: 0.9905\n","Epoch 44: val_loss did not improve from 1.79598\n","63/63 [==============================] - 13s 208ms/step - loss: 0.6272 - accuracy: 0.9905 - val_loss: 2.2836 - val_accuracy: 0.9720\n","Epoch 45/50\n","63/63 [==============================] - ETA: 0s - loss: 0.7311 - accuracy: 0.9820\n","Epoch 45: val_loss did not improve from 1.79598\n","63/63 [==============================] - 13s 209ms/step - loss: 0.7311 - accuracy: 0.9820 - val_loss: 1.8964 - val_accuracy: 0.9800\n","Epoch 46/50\n","63/63 [==============================] - ETA: 0s - loss: 0.6295 - accuracy: 0.9870\n","Epoch 46: val_loss did not improve from 1.79598\n","63/63 [==============================] - 14s 211ms/step - loss: 0.6295 - accuracy: 0.9870 - val_loss: 1.8703 - val_accuracy: 0.9780\n","Epoch 47/50\n","63/63 [==============================] - ETA: 0s - loss: 0.4438 - accuracy: 0.9895\n","Epoch 47: val_loss did not improve from 1.79598\n","63/63 [==============================] - 14s 220ms/step - loss: 0.4438 - accuracy: 0.9895 - val_loss: 1.8516 - val_accuracy: 0.9760\n","Epoch 48/50\n","63/63 [==============================] - ETA: 0s - loss: 0.4421 - accuracy: 0.9875\n","Epoch 48: val_loss did not improve from 1.79598\n","63/63 [==============================] - 14s 221ms/step - loss: 0.4421 - accuracy: 0.9875 - val_loss: 2.2369 - val_accuracy: 0.9760\n","Epoch 49/50\n","63/63 [==============================] - ETA: 0s - loss: 0.3552 - accuracy: 0.9910\n","Epoch 49: val_loss did not improve from 1.79598\n","63/63 [==============================] - 14s 212ms/step - loss: 0.3552 - accuracy: 0.9910 - val_loss: 2.0111 - val_accuracy: 0.9790\n","Epoch 50/50\n","63/63 [==============================] - ETA: 0s - loss: 0.3345 - accuracy: 0.9900\n","Epoch 50: val_loss did not improve from 1.79598\n","63/63 [==============================] - 14s 225ms/step - loss: 0.3345 - accuracy: 0.9900 - val_loss: 1.8886 - val_accuracy: 0.9740\n"]}]},{"cell_type":"markdown","metadata":{"id":"DfBnhGbyIxP-"},"source":["Let's plot our results again:"]},{"cell_type":"code","metadata":{"id":"QWXKpsbKIxP-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668761269344,"user_tz":-60,"elapsed":674,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"de360bb3-27a4-4583-f78c-2ef827c38b45"},"source":["import matplotlib.pyplot as plt\n","\n","acc_1 = history.history['accuracy']\n","val_acc_1 = history.history['val_accuracy']\n","loss_1 = history.history['loss']\n","val_loss_1 = history.history['val_loss']\n","\n","epochs = range(len(acc_1))\n","\n","plt.plot(epochs, acc_1, 'bo', label='Training acc')\n","plt.plot(epochs, val_acc_1, 'b', label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","\n","plt.figure()\n","\n","plt.plot(epochs, loss_1, 'bo', label='Training loss')\n","plt.plot(epochs, val_loss_1, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ahjKPoanIxQC"},"source":["As you can see, we reach a validation accuracy of about 97%-98%. This is much better than our small convnet trained from scratch."]},{"cell_type":"markdown","metadata":{"id":"pPKB6jWSIxQE"},"source":["## Fine-tuning\n","\n","Another widely used technique for model reuse, complementary to feature extraction, is _fine-tuning_. \n","Fine-tuning consists in **unfreezing a few of the top layers** \n","of a frozen model base used for feature extraction, and **jointly training both the newly added part of the model (in our case, the \n","fully-connected classifier) and these top layers**. This is called \"fine-tuning\" because it slightly adjusts the more abstract \n","representations of the model being reused, in order to make them more relevant for the problem at hand.\n","\n","![fine-tuning VGG16](https://s3.amazonaws.com/book.keras.io/img/ch5/vgg16_fine_tuning.png)"]},{"cell_type":"markdown","metadata":{"id":"8AuQAdiWIxQF"},"source":["We have stated before that it was necessary to freeze the convolution base of VGG16 in order to be able to train a randomly initialized \n","classifier on top. For the same reason, it is only possible to fine-tune the top layers of the convolutional base once the classifier on \n","top has already been trained. If the classified wasn't already trained, then the error signal propagating through the network during \n","training would be too large, and the representations previously learned by the layers being fine-tuned would be destroyed. Thus the steps \n","for fine-tuning a network are as follow:\n","\n","1. Add your custom network on top of an already trained base network.\n","2. Freeze the base network.\n","3. Train the part you added.\n","4. Unfreeze some layers in the base network.\n","5. Jointly train both these layers and the part you added.\n","\n","We have already completed the first 3 steps when doing feature extraction. Let's proceed with the 4th step: we will unfreeze our `conv_base`, \n","and then freeze individual layers inside of it.\n","\n","As a reminder, this is what our convolutional base looks like:"]},{"cell_type":"code","metadata":{"id":"BlvoFxSKIxQG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668761269345,"user_tz":-60,"elapsed":78,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"outputId":"00287bcb-29fa-4a33-ec63-ac94bc52473a"},"source":["conv_base.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"vgg16\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 180, 180, 3)]     0         \n","                                                                 \n"," block1_conv1 (Conv2D)       (None, 180, 180, 64)      1792      \n","                                                                 \n"," block1_conv2 (Conv2D)       (None, 180, 180, 64)      36928     \n","                                                                 \n"," block1_pool (MaxPooling2D)  (None, 90, 90, 64)        0         \n","                                                                 \n"," block2_conv1 (Conv2D)       (None, 90, 90, 128)       73856     \n","                                                                 \n"," block2_conv2 (Conv2D)       (None, 90, 90, 128)       147584    \n","                                                                 \n"," block2_pool (MaxPooling2D)  (None, 45, 45, 128)       0         \n","                                                                 \n"," block3_conv1 (Conv2D)       (None, 45, 45, 256)       295168    \n","                                                                 \n"," block3_conv2 (Conv2D)       (None, 45, 45, 256)       590080    \n","                                                                 \n"," block3_conv3 (Conv2D)       (None, 45, 45, 256)       590080    \n","                                                                 \n"," block3_pool (MaxPooling2D)  (None, 22, 22, 256)       0         \n","                                                                 \n"," block4_conv1 (Conv2D)       (None, 22, 22, 512)       1180160   \n","                                                                 \n"," block4_conv2 (Conv2D)       (None, 22, 22, 512)       2359808   \n","                                                                 \n"," block4_conv3 (Conv2D)       (None, 22, 22, 512)       2359808   \n","                                                                 \n"," block4_pool (MaxPooling2D)  (None, 11, 11, 512)       0         \n","                                                                 \n"," block5_conv1 (Conv2D)       (None, 11, 11, 512)       2359808   \n","                                                                 \n"," block5_conv2 (Conv2D)       (None, 11, 11, 512)       2359808   \n","                                                                 \n"," block5_conv3 (Conv2D)       (None, 11, 11, 512)       2359808   \n","                                                                 \n"," block5_pool (MaxPooling2D)  (None, 5, 5, 512)         0         \n","                                                                 \n","=================================================================\n","Total params: 14,714,688\n","Trainable params: 0\n","Non-trainable params: 14,714,688\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"rShALGemIxQJ"},"source":["\n","We will **fine-tune the last 3 convolutional layers**, which means that all layers up until `block4_pool` should be frozen, and the layers \n","`block5_conv1`, `block5_conv2` and `block5_conv3` should be trainable.\n","\n","Why not fine-tune more layers? Why not fine-tune the entire convolutional base? We could. However, we need to consider that:\n","\n","* Earlier layers in the convolutional base encode more generic, reusable features, while layers higher up encode more specialized features. It is \n","more useful to fine-tune the more specialized features, as these are the ones that need to be repurposed on our new problem. There would \n","be fast-decreasing returns in fine-tuning lower layers.\n","* The more parameters we are training, the more we are at risk of overfitting. The convolutional base has 15M parameters, so it would be \n","risky to attempt to train it on our small dataset.\n","\n","Thus, in our situation, it is a good strategy to only fine-tune the top 2 to 3 layers in the convolutional base.\n","\n","Let's set this up, starting from where we left off in the previous example:"]},{"cell_type":"code","metadata":{"id":"w2d3GREqIxQJ"},"source":["conv_base.trainable = True\n","\n","set_trainable = False\n","for layer in conv_base.layers:\n","    if layer.name == 'block5_conv1':\n","        set_trainable = True\n","    if set_trainable:\n","        layer.trainable = True\n","    else:\n","        layer.trainable = False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EIt2cmdiZzNM","executionInfo":{"status":"ok","timestamp":1668761269346,"user_tz":-60,"elapsed":42,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2766e364-5f05-4e10-8e4f-b5047936a871"},"source":["conv_base.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"vgg16\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 180, 180, 3)]     0         \n","                                                                 \n"," block1_conv1 (Conv2D)       (None, 180, 180, 64)      1792      \n","                                                                 \n"," block1_conv2 (Conv2D)       (None, 180, 180, 64)      36928     \n","                                                                 \n"," block1_pool (MaxPooling2D)  (None, 90, 90, 64)        0         \n","                                                                 \n"," block2_conv1 (Conv2D)       (None, 90, 90, 128)       73856     \n","                                                                 \n"," block2_conv2 (Conv2D)       (None, 90, 90, 128)       147584    \n","                                                                 \n"," block2_pool (MaxPooling2D)  (None, 45, 45, 128)       0         \n","                                                                 \n"," block3_conv1 (Conv2D)       (None, 45, 45, 256)       295168    \n","                                                                 \n"," block3_conv2 (Conv2D)       (None, 45, 45, 256)       590080    \n","                                                                 \n"," block3_conv3 (Conv2D)       (None, 45, 45, 256)       590080    \n","                                                                 \n"," block3_pool (MaxPooling2D)  (None, 22, 22, 256)       0         \n","                                                                 \n"," block4_conv1 (Conv2D)       (None, 22, 22, 512)       1180160   \n","                                                                 \n"," block4_conv2 (Conv2D)       (None, 22, 22, 512)       2359808   \n","                                                                 \n"," block4_conv3 (Conv2D)       (None, 22, 22, 512)       2359808   \n","                                                                 \n"," block4_pool (MaxPooling2D)  (None, 11, 11, 512)       0         \n","                                                                 \n"," block5_conv1 (Conv2D)       (None, 11, 11, 512)       2359808   \n","                                                                 \n"," block5_conv2 (Conv2D)       (None, 11, 11, 512)       2359808   \n","                                                                 \n"," block5_conv3 (Conv2D)       (None, 11, 11, 512)       2359808   \n","                                                                 \n"," block5_pool (MaxPooling2D)  (None, 5, 5, 512)         0         \n","                                                                 \n","=================================================================\n","Total params: 14,714,688\n","Trainable params: 7,079,424\n","Non-trainable params: 7,635,264\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"GzH60BRGIxQN"},"source":["Now we can start fine-tuning our network. We will do this with the RMSprop optimizer, **using a very low learning rate**. The reason for using \n","a low learning rate is that we want to limit the magnitude of the modifications we make to the representations of the 3 layers that we are \n","fine-tuning. Updates that are too large may harm these representations.\n","\n","Now let's proceed with fine-tuning:"]},{"cell_type":"code","metadata":{"id":"5fCNA45lH2fA"},"source":["model.compile(loss=\"binary_crossentropy\",\n","              optimizer=keras.optimizers.RMSprop(learning_rate=1e-5),\n","              metrics=[\"accuracy\"])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"38v8JffCaBFq","executionInfo":{"status":"ok","timestamp":1668761269347,"user_tz":-60,"elapsed":20,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"df14d4e4-dff8-493d-a0e1-6156fe5b38f0"},"source":["model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_2 (InputLayer)        [(None, 180, 180, 3)]     0         \n","                                                                 \n"," sequential (Sequential)     (None, 180, 180, 3)       0         \n","                                                                 \n"," tf.__operators__.getitem (S  (None, 180, 180, 3)      0         \n"," licingOpLambda)                                                 \n","                                                                 \n"," tf.nn.bias_add (TFOpLambda)  (None, 180, 180, 3)      0         \n","                                                                 \n"," vgg16 (Functional)          (None, 5, 5, 512)         14714688  \n","                                                                 \n"," flatten (Flatten)           (None, 12800)             0         \n","                                                                 \n"," dense (Dense)               (None, 256)               3277056   \n","                                                                 \n"," dropout (Dropout)           (None, 256)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 257       \n","                                                                 \n","=================================================================\n","Total params: 17,992,001\n","Trainable params: 10,356,737\n","Non-trainable params: 7,635,264\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"Z1OWu-kJIxQO","executionInfo":{"status":"ok","timestamp":1668761823406,"user_tz":-60,"elapsed":554068,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"fa2dc86c-a954-4d9c-9632-11ebfa9f4d0a"},"source":["callbacks_list = [\n","    keras.callbacks.ModelCheckpoint(\n","        filepath=save_path,\n","        monitor=\"val_loss\",\n","        verbose=1,\n","        save_best_only=True)\n","]\n","\n","history = model.fit(\n","    train_dataset,\n","    epochs=30, # 30 epochs take approximately 10 minutes\n","    validation_data=validation_dataset,\n","    callbacks=callbacks_list)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","63/63 [==============================] - ETA: 0s - loss: 0.3256 - accuracy: 0.9920\n","Epoch 1: val_loss improved from inf to 1.83289, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 19s 249ms/step - loss: 0.3256 - accuracy: 0.9920 - val_loss: 1.8329 - val_accuracy: 0.9790\n","Epoch 2/30\n","63/63 [==============================] - ETA: 0s - loss: 0.4038 - accuracy: 0.9920\n","Epoch 2: val_loss did not improve from 1.83289\n","63/63 [==============================] - 15s 230ms/step - loss: 0.4038 - accuracy: 0.9920 - val_loss: 1.9375 - val_accuracy: 0.9770\n","Epoch 3/30\n","63/63 [==============================] - ETA: 0s - loss: 0.2387 - accuracy: 0.9920\n","Epoch 3: val_loss improved from 1.83289 to 1.64424, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 16s 258ms/step - loss: 0.2387 - accuracy: 0.9920 - val_loss: 1.6442 - val_accuracy: 0.9750\n","Epoch 4/30\n","63/63 [==============================] - ETA: 0s - loss: 0.3440 - accuracy: 0.9920\n","Epoch 4: val_loss improved from 1.64424 to 1.35547, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 16s 247ms/step - loss: 0.3440 - accuracy: 0.9920 - val_loss: 1.3555 - val_accuracy: 0.9750\n","Epoch 5/30\n","63/63 [==============================] - ETA: 0s - loss: 0.3176 - accuracy: 0.9910\n","Epoch 5: val_loss improved from 1.35547 to 1.33643, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 16s 246ms/step - loss: 0.3176 - accuracy: 0.9910 - val_loss: 1.3364 - val_accuracy: 0.9790\n","Epoch 6/30\n","63/63 [==============================] - ETA: 0s - loss: 0.2231 - accuracy: 0.9925\n","Epoch 6: val_loss improved from 1.33643 to 1.30361, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 17s 267ms/step - loss: 0.2231 - accuracy: 0.9925 - val_loss: 1.3036 - val_accuracy: 0.9770\n","Epoch 7/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1951 - accuracy: 0.9935\n","Epoch 7: val_loss improved from 1.30361 to 1.23376, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 16s 249ms/step - loss: 0.1951 - accuracy: 0.9935 - val_loss: 1.2338 - val_accuracy: 0.9770\n","Epoch 8/30\n","63/63 [==============================] - ETA: 0s - loss: 0.2734 - accuracy: 0.9915\n","Epoch 8: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 234ms/step - loss: 0.2734 - accuracy: 0.9915 - val_loss: 1.4402 - val_accuracy: 0.9760\n","Epoch 9/30\n","63/63 [==============================] - ETA: 0s - loss: 0.2637 - accuracy: 0.9915\n","Epoch 9: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 229ms/step - loss: 0.2637 - accuracy: 0.9915 - val_loss: 2.1872 - val_accuracy: 0.9740\n","Epoch 10/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1869 - accuracy: 0.9920\n","Epoch 10: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 240ms/step - loss: 0.1869 - accuracy: 0.9920 - val_loss: 1.6059 - val_accuracy: 0.9770\n","Epoch 11/30\n","63/63 [==============================] - ETA: 0s - loss: 0.0903 - accuracy: 0.9970\n","Epoch 11: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 234ms/step - loss: 0.0903 - accuracy: 0.9970 - val_loss: 1.5934 - val_accuracy: 0.9800\n","Epoch 12/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1828 - accuracy: 0.9930\n","Epoch 12: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 229ms/step - loss: 0.1828 - accuracy: 0.9930 - val_loss: 1.4603 - val_accuracy: 0.9800\n","Epoch 13/30\n","63/63 [==============================] - ETA: 0s - loss: 0.2244 - accuracy: 0.9930\n","Epoch 13: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 230ms/step - loss: 0.2244 - accuracy: 0.9930 - val_loss: 1.3603 - val_accuracy: 0.9810\n","Epoch 14/30\n","63/63 [==============================] - ETA: 0s - loss: 0.0606 - accuracy: 0.9970\n","Epoch 14: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 235ms/step - loss: 0.0606 - accuracy: 0.9970 - val_loss: 1.3165 - val_accuracy: 0.9810\n","Epoch 15/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1567 - accuracy: 0.9960\n","Epoch 15: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 227ms/step - loss: 0.1567 - accuracy: 0.9960 - val_loss: 1.3479 - val_accuracy: 0.9790\n","Epoch 16/30\n","63/63 [==============================] - ETA: 0s - loss: 0.0897 - accuracy: 0.9960\n","Epoch 16: val_loss did not improve from 1.23376\n","63/63 [==============================] - 16s 238ms/step - loss: 0.0897 - accuracy: 0.9960 - val_loss: 1.4010 - val_accuracy: 0.9770\n","Epoch 17/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1096 - accuracy: 0.9965\n","Epoch 17: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 229ms/step - loss: 0.1096 - accuracy: 0.9965 - val_loss: 1.2884 - val_accuracy: 0.9740\n","Epoch 18/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1399 - accuracy: 0.9955\n","Epoch 18: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 231ms/step - loss: 0.1399 - accuracy: 0.9955 - val_loss: 1.4145 - val_accuracy: 0.9800\n","Epoch 19/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1990 - accuracy: 0.9940\n","Epoch 19: val_loss did not improve from 1.23376\n","63/63 [==============================] - 15s 233ms/step - loss: 0.1990 - accuracy: 0.9940 - val_loss: 1.7088 - val_accuracy: 0.9750\n","Epoch 20/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1071 - accuracy: 0.9955\n","Epoch 20: val_loss improved from 1.23376 to 1.12953, saving model to /content/drive/My Drive/[AIDE] 2022-2023 - Data/cats_and_dogs_small_pretrained.h5\n","63/63 [==============================] - 16s 253ms/step - loss: 0.1071 - accuracy: 0.9955 - val_loss: 1.1295 - val_accuracy: 0.9780\n","Epoch 21/30\n","63/63 [==============================] - ETA: 0s - loss: 0.0869 - accuracy: 0.9965\n","Epoch 21: val_loss did not improve from 1.12953\n","63/63 [==============================] - 15s 230ms/step - loss: 0.0869 - accuracy: 0.9965 - val_loss: 1.1452 - val_accuracy: 0.9800\n","Epoch 22/30\n","63/63 [==============================] - ETA: 0s - loss: 0.0954 - accuracy: 0.9965\n","Epoch 22: val_loss did not improve from 1.12953\n","63/63 [==============================] - 15s 238ms/step - loss: 0.0954 - accuracy: 0.9965 - val_loss: 1.2013 - val_accuracy: 0.9790\n","Epoch 23/30\n","63/63 [==============================] - ETA: 0s - loss: 0.2100 - accuracy: 0.9945\n","Epoch 23: val_loss did not improve from 1.12953\n","63/63 [==============================] - 15s 236ms/step - loss: 0.2100 - accuracy: 0.9945 - val_loss: 1.2818 - val_accuracy: 0.9790\n","Epoch 24/30\n","63/63 [==============================] - ETA: 0s - loss: 0.0850 - accuracy: 0.9965\n","Epoch 24: val_loss did not improve from 1.12953\n","63/63 [==============================] - 15s 235ms/step - loss: 0.0850 - accuracy: 0.9965 - val_loss: 1.1561 - val_accuracy: 0.9810\n","Epoch 25/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1343 - accuracy: 0.9955\n","Epoch 25: val_loss did not improve from 1.12953\n","63/63 [==============================] - 15s 239ms/step - loss: 0.1343 - accuracy: 0.9955 - val_loss: 2.1805 - val_accuracy: 0.9720\n","Epoch 26/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1571 - accuracy: 0.9965\n","Epoch 26: val_loss did not improve from 1.12953\n","63/63 [==============================] - 15s 230ms/step - loss: 0.1571 - accuracy: 0.9965 - val_loss: 1.4788 - val_accuracy: 0.9780\n","Epoch 27/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1070 - accuracy: 0.9960\n","Epoch 27: val_loss did not improve from 1.12953\n","63/63 [==============================] - 15s 231ms/step - loss: 0.1070 - accuracy: 0.9960 - val_loss: 1.3403 - val_accuracy: 0.9780\n","Epoch 28/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1067 - accuracy: 0.9970\n","Epoch 28: val_loss did not improve from 1.12953\n","63/63 [==============================] - 15s 238ms/step - loss: 0.1067 - accuracy: 0.9970 - val_loss: 1.4511 - val_accuracy: 0.9760\n","Epoch 29/30\n","63/63 [==============================] - ETA: 0s - loss: 0.0649 - accuracy: 0.9970\n","Epoch 29: val_loss did not improve from 1.12953\n","63/63 [==============================] - 15s 230ms/step - loss: 0.0649 - accuracy: 0.9970 - val_loss: 1.8567 - val_accuracy: 0.9740\n","Epoch 30/30\n","63/63 [==============================] - ETA: 0s - loss: 0.1435 - accuracy: 0.9965\n","Epoch 30: val_loss did not improve from 1.12953\n","63/63 [==============================] - 15s 232ms/step - loss: 0.1435 - accuracy: 0.9965 - val_loss: 1.4365 - val_accuracy: 0.9750\n"]}]},{"cell_type":"markdown","metadata":{"id":"JnHbUyTgIxQT"},"source":["Let's plot our results using the same plotting code as before:"]},{"cell_type":"code","metadata":{"id":"JFyPu3hAIxQU","executionInfo":{"status":"ok","timestamp":1668761823886,"user_tz":-60,"elapsed":523,"user":{"displayName":"Michele Baldassini","userId":"04240742078627237530"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6b57b430-265a-4e06-b608-c1b5ca4338ae"},"source":["acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(len(acc))\n","\n","plt.plot(epochs, acc, 'bo', label='Training acc')\n","plt.plot(epochs, val_acc, 'b', label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","\n","plt.figure()\n","\n","plt.plot(epochs, loss, 'bo', label='Training loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"xfmrURGgIxQh"},"source":["\n","Here we get a validation accuracy of ~98% and we can barely see a slight tendency of improvement in accuracy and loss, with a reduced loss compared to the previous experiment. In the original Kaggle competition around this dataset, this would have been one of the top results. \n","However, using modern deep learning techniques, we managed to reach this result using only a very small fraction of the training data \n","available (about 10%). There is a huge difference between being able to train on 20,000 samples compared to 2,000 samples!"]},{"cell_type":"markdown","metadata":{"id":"a2YTThVnO6Lb"},"source":["##When and how to fine-tune? Rules of thumb"]},{"cell_type":"markdown","metadata":{"id":"rbG602GhQXIc"},"source":["### New dataset is **small and similar to the original** dataset. \n","Training an MLP classifier on top layer might be the best idea.\n","- Small data: our major concern is overfitting. it might not be appropriate to fine-tune the CNN. \n","- Similar data: we can exploit the knowledge from the pretrained CNN. Higher-level features should be relevant for the new task as well.\n"]},{"cell_type":"markdown","metadata":{"id":"fmkQtlQRQbtI"},"source":["### New dataset is **large** and **similar to the original** dataset. \n","Fine-tuning few layers might be the best idea.\n","- Big data: we do not run the risk of overfitting.\n","- Similar data: we can exploit the knowledge from the pretrained CNN.\n"]},{"cell_type":"markdown","metadata":{"id":"___3y4QVQi5J"},"source":["### New dataset is **small** and **very different from the original** dataset. \n","We are in trouble: try to train an MLP classifier from activation earlier in the network (intermediate layers, not on top, dataset-specific, layers)\n","- Small data: we should not fine-tune hidden layers.\n","- Different data: we can reuse only the first convolutional layers (generic features)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"rCxjXPZ_QosX"},"source":["### New dataset is **large** and **very different from the original** dataset. \n","We can either train a CNN from scratch or fine-tuning a larger number of layers.\n","- Big data: we do not run the risk of overfitting.\n","- Different data: We could benefit from the weight initialization of a pre-trained network and fine-tune even the earlier layers."]},{"cell_type":"markdown","metadata":{"id":"9PPlDYCJIxQh"},"source":["## Take-aways: using convnets with small datasets\n","\n","Here's what you should take away from these two notebooks:\n","\n","* Convnets are the best type of machine learning models for computer vision tasks. It is possible to train one from scratch even on a very \n","small dataset, with decent results.\n","* Convnets work by learning a hierarchy of modular patterns and concepts to\n","represent the visual world.\n","* On a small dataset, overfitting will be the main issue. Data augmentation is a powerful way to fight overfitting when working with image \n","data.\n","* It is easy to reuse an existing convnet on a new dataset, via feature extraction. This is a very valuable technique for working with \n","small image datasets.\n","* As a complement to feature extraction, one may use fine-tuning, which adapts to a new problem some of the representations previously \n","learned by an existing model. This pushes performance a bit further.\n","\n","Now you have a solid set of tools for dealing with image classification problems, in particular with small datasets.\n"]},{"cell_type":"markdown","metadata":{"id":"VQvdmUtaGdsn"},"source":["# Deep Learning architectures\n","\n","![architectures](https://www.researchgate.net/profile/Tiago-Carvalho-8/publication/330478807/figure/fig1/AS:756995804110849@1557493272678/VGG16-VGG19-Inception-V3-Xception-and-ResNet-50-architectures.ppm)"]},{"cell_type":"markdown","metadata":{"id":"r9OnHBw1F4jD"},"source":["## [ResNet](https://openaccess.thecvf.com/content_cvpr_2016/papers/He_Deep_Residual_Learning_CVPR_2016_paper.pdf)"]},{"cell_type":"code","metadata":{"id":"3-ZuF19BFxG7"},"source":["from tensorflow.keras.applications.resnet_v2 import preprocess_input\n","from tensorflow.keras.applications.resnet_v2 import ResNet50V2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5P2UZFYQlZLH"},"source":["**Key intuition:**\n","- **residual connection** $\\sim$ ***information shortcuts***: how to avoid noise propagation through layers in deep networks? Just force each function in the chain to be *non-destructive* (i.e., to retain a noiseless version of the information contained in the previous input);\n","  - countermeasures should be taken to handle *shapes conflicts* (e.g., different number of feature maps, different shape of each feature map);\n","- Normalization of input data is beneficial, if not mandatory. Could normalizing also intermediate activations help? This is accomplished with **batch normalization**;\n","  - `BatchNormalization` layer adopted in many architectures, including Resnet, Xception, EfficientNet;\n","  - During training, it uses the mean and variance of the current batch of data to normalize samples, and during inference, it uses an exponential moving average of the batch-wise mean and variance of the data seen during training.\n","  - BN layer should be kept *frozen* during fine-tuning, i.e. avoid updating internal mean and variance."]},{"cell_type":"markdown","metadata":{"id":"UUp0dZgbF4OO"},"source":["## [Xception](https://arxiv.org/abs/1610.02357)\n","**Key intuition:**\n","- **Depthwise separable convolutions**: This layer performs a spatial convolution on each channel of its input, independently, before mixing output channels via a pointwise convolution (a 1 × 1 convolution)\n","  - produce smaller models compared to classical convolution (reduced number of trainable parameters): proved to converge faster and to be less prone to overfitting.\n","\n"," ![dsc](https://miro.medium.com/max/549/1*JwCJCgN2UreEn3U1nwVj8Q.png)"]},{"cell_type":"markdown","metadata":{"id":"gpM2D7ItHReB"},"source":["# Exercise\n","Try with other pretrained models.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"8U6KLvdcOT1U"},"source":["# References\n","- [How transferable are features in deep neural networks?](https://dl.acm.org/citation.cfm?id=2969197)\n","- [Stanford CS231 class](http://cs231n.github.io/transfer-learning/)\n","- Original VGG [paper](https://arxiv.org/pdf/1409.1556.pdf)\n","- Resnet [paper](https://openaccess.thecvf.com/content_cvpr_2016/papers/He_Deep_Residual_Learning_CVPR_2016_paper.pdf)\n","- Xception [paper](https://arxiv.org/abs/1610.02357)\n","- Batch Normalization [paper](https://arxiv.org/abs/1502.03167)"]}]}